[user]
	name = Francesco Ferraioli
	email = francesco.ferraioli@outlook.com
[color]
	ui = true
[pager]
	branch = false
[alias]
	a = add
	aa = add --all
	anw = "!f () { fileName=${1}; git diff -U0 -w --no-color -- $fileName | git apply --cached --ignore-whitespace --unidiff-zero -; }; f $1"
	amend = commit --amend --no-edit
	c = commit
	cm = commit --message
	s = status --short
	st = status
	b = branch
	cb = "!f() { git branch | grep \\* | cut -d ' ' -f2; }; f"
	co = checkout
	cob = checkout -b
	com = !git checkout $(git mbr)
	cp = cherry-pick
	d = diff
	ds = diff --staged
	dr = !git diff origin/$(git cb)
	discard = checkout --
	fixup = commit --fixup
	ls = diff-tree --no-commit-id --name-only -r
	rh = reset --hard
	uncommit = reset --soft HEAD^
	unstage = reset HEAD
	yeet = reset --hard HEAD
	patch = add --patch
	l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit
	l1 = !git l -n 1
	l2 = !git l -n 2
	l3 = !git l -n 3
	l4 = !git l -n 4
	l5 = !git l -n 5
	l10 = !git l -n 10
	l15 = !git l -n 15
	l20 = !git l -n 20
	l25 = !git l -n 25
	ll = !git l -n 10
	lb = !git l origin/$(git mbr).. 
	wip = commit -m 'WIP'
	p = pull
	ps = push
	psfl = push --force-with-lease
	fmar = !git fetch && git rebase origin/$(git mbr)
	r = rebase
	rb = !git rebase -i origin/$(git mbr)
	rc = rebase --continue
	ra = rebase --abort
	rs = rebase --skip
	showv = !git showtool
	dv = difftool --no-prompt
	dsv = difftool --no-prompt --staged
	tagcommit = rev-list -n 1
	tagadd = "!f () { git tag $1; git push origin $1; }; f"
	tagdelete = "!f () { git tag -d $1; git push origin :refs/tags/$1; }; f"
	tagupdate = "!f () { git tagdelete $1; git tagadd $1; }; f"
	tac = "!f () { git tagadd $(git log -1 --pretty=%B); }; f"
	tdc = "!f () { git tagdelete $(git log -1 --pretty=%B); }; f"
	tuc = "!f () { git tagupdate $(git log -1 --pretty=%B); }; f"
	pa = "!f () { git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done; }; f"
	pm = remote prune origin
	sm = "!f() { git branch --merged $(git mbr) | grep -v '^[ *]*$(git mbr)$'; }; f"
	dm = "!f() { git sm | xargs git branch -d; }; f"
	psu = "!f() { git cb | xargs -n 1 git push -u origin; }; f"
	cbr = "!f() { git cb | sed 's/-/ /g' | awk '{$1=toupper(substr($1,0,1))substr($1,2)}1' | xargs -I % sh -c 'git commit -m \"%\"'; }; f"
	cobt = "!f () { echo $\"$1\" | sed 's/ /-/g' | awk '{$1=tolower($1)}1' | xargs -n 1 git checkout -b; }; f"
	showtool = "!f () { rev=${1:-HEAD}; git difftool --no-prompt $rev~1 $rev; }; f $1"
	sl = "!f () { count=${1:-3}; git s | awk '{print $2}'  | xargs -I % -n 1 git slOne % $count; }; f $1"
	slOne = "!f () { fileName=${1}; count=${2:-3}; echo ===================== && echo $1 && echo ===================== && git l -n $count -- $fileName && echo --------------------- && echo; }; f $1 $2"
	slc = "!f () { git s | awk '{print $2}' | xargs -I % -n 1 git slCommitOne %; }; f"
	slCommitOne = "!f () { fileName=${1}; git log -n 1 $fileName | head -n 1 | cut -d ' ' -f2 | xargs -I {} git slAddAndFixup $fileName {}; }; f $1"
	slAddAndFixup = "!f () { fileName=${1}; sha=${2}; git a $fileName && git fixup $sha; }; f $1 $2"
	mbr = "!f () { git branch --remote | awk '{print $1}' | rg '^origin/(develop|master|main)$' | head -n 1 | sed 's/origin\\///'; }; f"
[core]
	excludesfile = ~/.gitignore
	pager = diff-so-fancy | less --tabs=4 -RFX
[help]
	autocorrect = 1
[push]
	default = current
	followTags = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[rebase]
	autosquash = true
[diff]
	tool = diffmerge
[difftool "diffmerge"]
	cmd = /usr/local/bin/diffmerge \"$LOCAL\" \"$REMOTE\"
[pull]
	rebase = true
